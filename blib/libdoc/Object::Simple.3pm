.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Object::Simple 3"
.TH Object::Simple 3 "2009-05-19" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Object::Simple \- Very simple framework for Object Oriented Perl.
.SH "VERSION"
.IX Header "VERSION"
Version 0.01_01
.SH "CAUTION"
.IX Header "CAUTION"
Object::Simple is yet experimenta stage.
.PP
Please wait until Object::Simple will be stable.
.SH "FEATURES"
.IX Header "FEATURES"
Object::Simple is framework that simplify Object Oriented Perl.
.PP
The feature is that
.IP "1. You can define accessors in very simple way." 4
.IX Item "1. You can define accessors in very simple way."
.PD 0
.IP "2. new method is prepared." 4
.IX Item "2. new method is prepared."
.IP "3. You can define default value of attribute." 4
.IX Item "3. You can define default value of attribute."
.IP "4. Error object is thrown, when error is occured." 4
.IX Item "4. Error object is thrown, when error is occured."
.PD
.PP
If you use Object::Simple, you are free from bitter work 
writing new methods and accessors repeatedly.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # Class definition( Book.pm )
\&    package Book;
\&    use Object::Simple;
.Ve
.PP
.Vb 3
\&    sub title : Attr {}
\&    sub author : Attr {}
\&    sub price : Attr {}
.Ve
.PP
.Vb 1
\&    Object::Simple->end; # End of module. Don't forget to call 'end' method
.Ve
.PP
.Vb 3
\&    # Using class
\&    use Book;
\&    my $book = Book->new( title => 'a', author => 'b', price => 1000 );
.Ve
.PP
.Vb 2
\&    # Default value of attribute
\&    sub author : Attr { default => 'Kimoto' }
.Ve
.PP
.Vb 6
\&    #Automatically build of attribute
\&    sub author : Attr { auto_build => 1 }
\&    sub build_author{ 
\&        my $self = shift;
\&        $self->author( $self->title . "b" );
\&    }
.Ve
.PP
.Vb 3
\&    # Constraint of attribute setting
\&    sub price : Attr { type => 'Int' }
\&    sub author : Attr { type => 'Person' }
.Ve
.PP
.Vb 2
\&    # Read only accessor
\&    sub year : Attr { read_only => 1 }
.Ve
.PP
.Vb 2
\&    # Required attributes
\&    sub width : Attr { required => 1 }
.Ve
.PP
.Vb 2
\&    # weak reference
\&    sub parent : Attr { weak => 1 }
.Ve
.PP
.Vb 5
\&    # setter retur value
\&    sub title : Attr { setter_return => 'old' }
\&    sub title : Attr { setter_return => 'current' }
\&    sub title : Attr { setter_return => 'self' }
\&    sub title : Attr { setter_return => 'undef' }
.Ve
.PP
.Vb 3
\&    # Inheritance
\&    package Magazine;
\&    use Object::Simple( base => 'Book' );
.Ve
.PP
.Vb 3
\&    # Mixin
\&    package Book;
\&    use Object::Simple( mixin => [ 'Object::Simple::Mixin::Meta' ] );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "new"
.IX Subsection "new"
new method is prepared.
.PP
.Vb 2
\&    use Book;
\&    my $book = Book->new( title => 'a', author => 'b', price => 1000 );
.Ve
.Sh "_arrange_args"
.IX Subsection "_arrange_args"
You can override this method to arrange arguments.
.Sh "end"
.IX Subsection "end"
resist attribute and create accessors.
.PP
.Vb 1
\&    Object::Simple->end
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Object::Simple::Constraint \- Constraint methods for Object::Simple 'type' option.
.PP
Object::Simple::Error \- Structured error system for Object::Simple.
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuki Kimoto, \f(CW\*(C`<kimoto.yuki at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-simo at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Object::Simple>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Object::Simple
.Ve
.PP
You can also look for information at:
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Object::Simple>
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/Object::Simple>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/Object::Simple>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/Object::Simple/>
.SH "SIMILAR MODULES"
.IX Header "SIMILAR MODULES"
Class::Accessor,Class::Accessor::Fast, Moose, Mouse.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Yuki Kimoto, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
